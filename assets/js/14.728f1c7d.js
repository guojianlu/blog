(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{278:function(t,a,s){"use strict";s.r(a);var e=s(13),i=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git常见命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git常见命令"}},[t._v("#")]),t._v(" Git常见命令")]),t._v(" "),a("h2",{attrs:{id:"git初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git初始化"}},[t._v("#")]),t._v(" Git初始化")]),t._v(" "),a("h4",{attrs:{id:"git授权ssh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git授权ssh"}},[t._v("#")]),t._v(" Git授权SSH")]),t._v(" "),a("p",[t._v("大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。在 Github 或者 Gitlab 上提交代码，我们需要把 SSH 公钥复制托管到Github的")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("personal setting -> ssh keys")])]),t._v(" "),a("h4",{attrs:{id:"生成-ssh-key-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成-ssh-key-方法"}},[t._v("#")]),t._v(" 生成 SSH-Key 方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 进入ssh目录\n$ cd ~/.ssh           \n# 生成ssh公私钥\n$ ssh-keygen              \n# 复制ssh公钥\n$ cat ~/.ssh/id_rsa.pub   \n")])])]),a("h2",{attrs:{id:"初始化仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化仓库"}},[t._v("#")]),t._v(" 初始化仓库")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("可以在空目录初始化仓库，也能是已有的项目初始化仓库")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 在当前目录新建一个Git代码库\n$ git init                        \n\n# 新建一个目录，将其初始化为Git代码库\n$ git init <project-name>         \n\n# clone git仓库\n$ git clone <git-hub-url>  \n\n# [高阶用法] clone git仓库并且制定分支\n$ git clone <url> -b <branch> \n")])])]),a("h2",{attrs:{id:"git忽略不应该跟踪的文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git忽略不应该跟踪的文件"}},[t._v("#")]),t._v(" Git忽略不应该跟踪的文件")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v(".gitignore 文件显式地指定了哪些文件不应被 Git 追踪，即被 Git 忽略掉。例如开发过程中 node_module，.vscode 等文件不需要被跟踪和提交，可以在初始化的忽略它们。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# .gitignore 文件\nnode_module\n.vscode\n")])])]),a("h2",{attrs:{id:"git配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git配置"}},[t._v("#")]),t._v(" Git配置")]),t._v(" "),a("h3",{attrs:{id:"修改用户信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改用户信息"}},[t._v("#")]),t._v(" 修改用户信息")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 配置信息列表\n$ git config --list     \n\n# 设置用户名\n$ git config --global user.name \"jerry\"\n\n# 设置邮箱\n$ git config --global user.email 'xxxx@qq.com'\n")])])]),a("h3",{attrs:{id:"获取name和email"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取name和email"}},[t._v("#")]),t._v(" 获取name和email")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git config user.name\n$ git config user.email\n")])])]),a("h3",{attrs:{id:"设置不同的仓库源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置不同的仓库源"}},[t._v("#")]),t._v(" 设置不同的仓库源")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 查看帮助\n$ git remote --help                   \n\n# 查看不同源\n$ git remote\n\n# 添加不同地址的源，并取一个别名\n$ git remote add [name] [url]\n$ git remote add origin git@github.com:xxxxx/xxx\n\n# 删除一个源\n$ git remote remove [name] \n")])])]),a("h3",{attrs:{id:"第一次推送内容到master分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一次推送内容到master分支"}},[t._v("#")]),t._v(" 第一次推送内容到master分支")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("code",[t._v("-u")]),t._v("参数不仅把本地master分支的内容推送到远程仓库的master分支上，而且和远程仓库相关联起来"),a("br"),t._v("\n随后的远程推送内容，只需要"),a("code",[t._v("$ git push origin master")]),t._v("命令即可")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git push -u origin master\n")])])]),a("h3",{attrs:{id:"克隆远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#克隆远程仓库"}},[t._v("#")]),t._v(" 克隆远程仓库")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("code",[t._v("git")]),t._v("协议是SSH协议，大部分克隆可以使用这种协议"),a("br"),t._v(" "),a("code",[t._v("https")]),t._v("协议是口令协议，是针对只开发了https协议的网络")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git clone git@github.com:xxx/xxx\n$ git clone https://github.com/xxx/xxx\n")])])]),a("h2",{attrs:{id:"添加文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加文件"}},[t._v("#")]),t._v(" 添加文件")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("可以添加一个或者多个文件")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git add readme.txt\n$ git add file1.txt file2.txt\n")])])]),a("h2",{attrs:{id:"提交文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交文件"}},[t._v("#")]),t._v(" 提交文件")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("-m '说明注释' 代表本次提交的说明注释信息。\n--amend 对最新一条commit 进行修正。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v('"amend" 是「修正」的意思。在提交时，如果加上 --amend 参数，Git 不会在当前 commit 上增加 commit，而是会把当前commit 里的内容和暂存区(stageing area)里的内容合并起来后创建一个新的 commit，用这个新的 commit 把当前 commit替换掉。所以 commit --amend 做的事就是它的字面意思:对最新一条commit 进行修正。')])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git commit -m '说明注释'\n\n# 对上一次commit进行修正\n$ git add fix.txt\t\t\n$ git commit --amend\n")])])]),a("h2",{attrs:{id:"时光穿梭机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时光穿梭机"}},[t._v("#")]),t._v(" 时光穿梭机")]),t._v(" "),a("h3",{attrs:{id:"获取当前仓库的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取当前仓库的状态"}},[t._v("#")]),t._v(" 获取当前仓库的状态")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git status\n")])])]),a("h3",{attrs:{id:"查看修改的内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看修改的内容"}},[t._v("#")]),t._v(" 查看修改的内容")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git diff\n")])])]),a("h3",{attrs:{id:"版本回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),a("h4",{attrs:{id:"查看提交日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看提交日志"}},[t._v("#")]),t._v(" 查看提交日志")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("code",[t._v("HEAD")]),t._v("：代表当前版本"),a("br"),t._v(" "),a("code",[t._v("HEAD^")]),t._v("：代表上一个版本"),a("br"),t._v(" "),a("code",[t._v("HEAD^^")]),t._v("：代表上上一个版本")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git log\n")])])]),a("h4",{attrs:{id:"查看命令日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看命令日志"}},[t._v("#")]),t._v(" 查看命令日志")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("code",[t._v("$ git reflog")]),t._v("查看的是每一次的命令的记录，头部有版本号")])]),t._v(" "),a("h4",{attrs:{id:"版本回退-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回退-2"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("--hard 后面接HEAD或者具体的版本号"),a("br"),t._v("\n例如："),a("code",[t._v("$ git reset --hard HEAD^")]),t._v("回退到上一个版本"),a("br"),t._v("\n例如："),a("code",[t._v("$ git reset --hard 48e56e")]),t._v("回退到指定版本"),a("br"),t._v("\n注：回退后，"),a("code",[t._v("$ git log")]),t._v("命令不会输出该版本往后的版本记录，这时可以使用"),a("code",[t._v("$ git reflog")]),t._v("命令先找到版本号")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 丢弃最新的提交\n$ git reset --hard HEAD^\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("reset 的本质: 移动 HEAD 以及它所指向的branch。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("reset --hard: 重置工作目录。你的工作目录里的内容会被完全重置为和 HEAD 的新位置相同的内容。换句话说，就是你的未提交的修改会被全部擦掉。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("reset --soft: 保留工作目录。 会在重置 HEAD 和 branch 时，保留工作目录和暂存区中的内容，并把重置 HEAD 所带来的新的差异放进暂存区。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("reset 不加参数: 保留工作目录，并清空暂存区。reset 如果不加参数，那么默认使用 --mixed 参数。它的行为是:保留工作目录，并且清空暂存区。也就是说，工作目录的修改、暂存区的内容以及由 reset 所导致的新的文件差异，都会被放进工作目录。简而言之，就是「把所有差异都混合(mixed)放在工作目录中」。")])]),t._v(" "),a("h3",{attrs:{id:"管理修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理修改"}},[t._v("#")]),t._v(" 管理修改")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("git 管理的是修改而不是文件")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("git reset HEAD test.txt    to unstage   撤销暂存")])]),t._v(" "),a("h4",{attrs:{id:"管理修改示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理修改示例"}},[t._v("#")]),t._v(" 管理修改示例")]),t._v(" "),a("ul",[a("li",[t._v("修改文件")]),t._v(" "),a("li",[t._v("添加文件到暂存区")]),t._v(" "),a("li",[t._v("继续修改文件")]),t._v(" "),a("li",[t._v("提交文件到仓库")])]),t._v(" "),a("p",[a("strong",[t._v("结果")]),t._v("：git只会提交暂存区的内容，即只提交了第一次修改的内容，第二次修改的内容没有提交。")]),t._v(" "),a("h4",{attrs:{id:"办法一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#办法一"}},[t._v("#")]),t._v(" 办法一")]),t._v(" "),a("ul",[a("li",[t._v("先"),a("code",[t._v("$ git commit")]),t._v("提交第一次修改")]),t._v(" "),a("li",[t._v("再"),a("code",[t._v("$ git add")]),t._v("添加第二次修改")]),t._v(" "),a("li",[t._v("最后"),a("code",[t._v("$ git commit")]),t._v("提交第二次修改")])]),t._v(" "),a("h4",{attrs:{id:"办法二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#办法二"}},[t._v("#")]),t._v(" 办法二")]),t._v(" "),a("ul",[a("li",[t._v("先不提交第一次修改")]),t._v(" "),a("li",[a("code",[t._v("$ git add")]),t._v("添加第二次修改到暂存区")]),t._v(" "),a("li",[a("code",[t._v("$ git commit")]),t._v("一起提交第一次、第二次的修改")])]),t._v(" "),a("h3",{attrs:{id:"撤销修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),a("p",[t._v("撤销修改分三种情况")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("$ git add")]),t._v("之前")]),t._v(" "),a("li",[a("code",[t._v("$ git commit")]),t._v("之前")]),t._v(" "),a("li",[a("code",[t._v("$ git commit")]),t._v("之后")])]),t._v(" "),a("h4",{attrs:{id:"情况一解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况一解决办法"}},[t._v("#")]),t._v(" 情况一解决办法")]),t._v(" "),a("p",[t._v("直接使用"),a("code",[t._v("$ git checkout -- xxx")]),t._v("命令，丢掉当前工作区的修改")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git checkout -- readme.txt\n")])])]),a("h4",{attrs:{id:"情况二解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况二解决办法"}},[t._v("#")]),t._v(" 情况二解决办法")]),t._v(" "),a("ul",[a("li",[t._v("首先使用"),a("code",[t._v("$ git reset HEAD xx")]),t._v("命令，撤销暂存区的修改")]),t._v(" "),a("li",[t._v("随后使用"),a("code",[t._v("$ git checkout -- xx")]),t._v("命令，丢弃工作区的修改")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reset HEAD readme.txt\n$ git checkout -- readme.txt\n")])])]),a("h4",{attrs:{id:"情况三解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况三解决办法"}},[t._v("#")]),t._v(" 情况三解决办法")]),t._v(" "),a("p",[t._v("使用版本回退")]),t._v(" "),a("h3",{attrs:{id:"删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[t._v("#")]),t._v(" 删除文件")]),t._v(" "),a("ul",[a("li",[t._v("确定删除某一个文件")]),t._v(" "),a("li",[t._v("误删了某一个文件")])]),t._v(" "),a("h4",{attrs:{id:"情况一解决办法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况一解决办法-2"}},[t._v("#")]),t._v(" 情况一解决办法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git rm test.txt\n$ git commit -m 'sure remove test.txt'\n")])])]),a("h4",{attrs:{id:"情况二解决办法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#情况二解决办法-2"}},[t._v("#")]),t._v(" 情况二解决办法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git reset HEAD test.txt\n$ git checkout -- test.txt\n")])])]),a("h2",{attrs:{id:"分支管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),a("h3",{attrs:{id:"创建分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[t._v("#")]),t._v(" 创建分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git branch xxx\n")])])]),a("h3",{attrs:{id:"切换分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切换分支"}},[t._v("#")]),t._v(" 切换分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git checkout xxx\n")])])]),a("h4",{attrs:{id:"创建并切换分支的简写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建并切换分支的简写"}},[t._v("#")]),t._v(" 创建并切换分支的简写")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git checkout -b xxx\n")])])]),a("h3",{attrs:{id:"查看所有分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看所有分支"}},[t._v("#")]),t._v(" 查看所有分支")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("带"),a("code",[t._v("*")]),t._v("号的表示当前分支")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git branch\n# 查看本地分支及远端分支\n$ git branch -la \n")])])]),a("h3",{attrs:{id:"合并分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git merge xxx\n")])])]),a("h3",{attrs:{id:"删除分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 强制删除本地分支\n$ git branch -D [branchName]  \n\n# 删除已经Merge过的分支\n$ git branch -d [branchName] \n\n# 删除远端多余分支\ngit push -delete origin <branchName> \n")])])]),a("h3",{attrs:{id:"解决冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决冲突"}},[t._v("#")]),t._v(" 解决冲突")]),t._v(" "),a("p",[t._v("当合并分支出现冲突时，可以利用"),a("code",[t._v("git status")]),t._v("查看冲突的位置"),a("br"),t._v("\n手动解决冲突后")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git add 冲突文件\n$ git merge --continue\n\n# 放弃解决冲突，取消 merge \n$ git merge —abort\n")])])]),a("h3",{attrs:{id:"bug分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bug分支"}},[t._v("#")]),t._v(" Bug分支")]),t._v(" "),a("p",[t._v("工作做一半，突然接到一个任务解决bug，该怎样进行合理的git操作")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git stash")]),t._v("命令隐藏当前工作区")]),t._v(" "),a("li",[a("code",[t._v("git checkout -b xx")]),t._v("命令创建并切换到bug分支")]),t._v(" "),a("li",[a("code",[t._v("git add xx")]),t._v(" "),a("code",[t._v("git commit -m xx")]),t._v("修复提交bug分支")]),t._v(" "),a("li",[a("code",[t._v("git checkout master")]),t._v("切换到主分支")]),t._v(" "),a("li",[a("code",[t._v("git merge xxx")]),t._v("合并bug分支到主分支")]),t._v(" "),a("li",[a("code",[t._v("git branch -d xx")]),t._v("删除bug分支")]),t._v(" "),a("li",[a("code",[t._v("git stash pop")]),t._v("恢复隐藏的工作现成")])]),t._v(" "),a("h3",{attrs:{id:"feature分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feature分支"}},[t._v("#")]),t._v(" Feature分支")]),t._v(" "),a("p",[t._v("开发一个新功能mask1，但不保证后续这个新功能需不需要。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git checkout -b mask1")]),t._v("创建mask1分支")]),t._v(" "),a("li",[a("code",[t._v("git add xx")]),t._v(" "),a("code",[t._v("git commit -m xxx")]),t._v("开发完毕并提交到当前mask1分支上")])]),t._v(" "),a("p",[t._v("上级通知，此功能砍掉，不需要了")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git checkout dev")]),t._v("切换到开发分支")]),t._v(" "),a("li",[a("code",[t._v("git branch -D mask1")]),t._v("删除mask1分支的内容")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("code",[t._v("-d")]),t._v("小写的参数d，再删除时会被提示，改分支没有合并，无法删除"),a("br"),t._v(" "),a("code",[t._v("-D")]),t._v("大写的参数D，代表强制删除")])]),t._v(" "),a("h2",{attrs:{id:"git提交信息检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git提交信息检查"}},[t._v("#")]),t._v(" Git提交信息检查")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 查看当前工作区改动点\n$ git diff                               \n\n# 提交hash1和hash2的差异\n$ git diff commit_hash1 commit_hash2 \n\n# 分支a和b的差异\n$ git diff branch_a branch_b  \n\n# 显示暂存区和上一条提交之间的差异\n$ git diff --staged\n\n# 显示工作区与指定提交版本之间的差异\n$ git diff commit_hash \n\n# 当前改动文件\n$ git status     \n\n# 查看提交历史\n$ git log                \n\n# 提交历史缩减一行查看，主要是提交Hash值\n$ git log --pretty=oneline      \n")])])]),a("h2",{attrs:{id:"git高阶操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git高阶操作"}},[t._v("#")]),t._v(" Git高阶操作")]),t._v(" "),a("h3",{attrs:{id:"git-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("给你的 commit序列重新设置基础点(也就是父 commit)。展开来说就是，把你指定的 commit 以及它所在的 commit 串，以指定的目标 commit 为基础，依次重新提交一次。"),a("br"),t._v("\n需要说明的是，rebase 是站在需要被 rebase 的 commit 上进行操作，这点和 merge 是不同的。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 变基\n$ git rebase master \n")])])]),a("blockquote",[a("p",[t._v("rebase 过程可能会出现冲突，解决冲突后")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ git add .\n# 接下来git会继续应用剩余的补丁\n$ git rebase --continue  \n# 任何时候都可以使用如下命令终止rebase,分支会恢复到rebase开始前的状态\n$ git rebase --abort\n")])])]),a("h3",{attrs:{id:"cherry-pick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick"}},[t._v("#")]),t._v(" cherry-pick")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("把本分支或其他分支的某一次提交合并到当前分支")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 查看并获取某次提交的hash\n$ git log\n\n# 切换到master分支\n$ git checkout master\n\n# 将hash_a的commit合并到master分支\n$ git cherry-pick hash_a\n")])])]),a("h3",{attrs:{id:"删除-git-缓存文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除-git-缓存文件"}},[t._v("#")]),t._v(" 删除 Git 缓存文件")]),t._v(" "),a("p",[t._v("场景： 有些情况开发者把原有不需要提交的代码提交到了远端仓库，再使用.gitignore忽略文件不生效。哪怕我们删除后再提交也没有办法忽略。这种情况下我们应该怎么解决？")]),t._v(" "),a("p",[t._v("方法： 我们可以使用git rm --cache 删除原来git跟踪的文件缓存，再在.gitignore里面添加忽略文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("## 当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用\n$ git rm file_path \n\n## 当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 只是不希望这个文件被版本控制, 可以使用\n# PS: file_path 为文件路径\n$ git rm --cached file_path\n")])])]),a("h3",{attrs:{id:"如何强制提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何强制提交"}},[t._v("#")]),t._v(" 如何强制提交")]),t._v(" "),a("p",[t._v("场景： 对于多人协作开发，有些时候我们会遇到版本管理混乱的情况，例如：远端版本错误了，但本地版本是正确的。 如何才能让强制更新远端版本，保持和本地工作区环境一样？")]),t._v(" "),a("p",[t._v("方法： 强制push本地正确的版本，但是慎用。因为它是不可逆转的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 强制更新，慎用\n$ git push origin master --force  \n")])])]),a("h3",{attrs:{id:"revert-和-reset区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#revert-和-reset区别"}},[t._v("#")]),t._v(" revert 和 reset区别")]),t._v(" "),a("p",[t._v("场景： 有些时候开发者需要退回到某次正确的提交记录，有些时候开发者的commit错误了，这时候可以使用 git revert 和 git reset。")]),t._v(" "),a("ul",[a("li",[t._v("git revert： 撤销某次操作，会产生一次新的commit记录，这个新的commit会把需要revert的那个commit的内容对冲掉。")]),t._v(" "),a("li",[t._v("git reset ： 撤销某次提交，但是此次之后的修改都会被退回到暂存区。")])]),t._v(" "),a("h3",{attrs:{id:"创建tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建tag"}},[t._v("#")]),t._v(" 创建Tag")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('# 创建tag\n# 创建标注标签\n$ git tag -a daily/0.0.1 -m "add develop file" \n\n# 简单创建tag\n$ git tag daily/0.0.1       \n\n# 删除标签\n$ git tag -d v1.0.0  \n\n# 分享tag到远端\n$ git push origin [tagname]\n$ git push origin --tags \n\n# 如何已某个tag创建分支\n$ git checkout -b <newbranch> <tagname>\n')])])]),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("h4",{attrs:{id:"如果你想看某个具体的-commit-的改动内容-可以用-show-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果你想看某个具体的-commit-的改动内容-可以用-show-命令"}},[t._v("#")]),t._v(" 如果你想看某个具体的 commit 的改动内容，可以用 show 命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 看当前 commit\n$ git show\n\n$ git show 5e68b0d8\t\n\n# 看指定 commit 中的指定文件\n$ git show 5e68b0d8 list.txt\n")])])]),a("h4",{attrs:{id:"checkout-的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checkout-的本质"}},[t._v("#")]),t._v(" checkout 的本质")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("checkout 并不止可以切换 branch。checkout 本质上的功能其实是: 签出( checkout )指定的 commit。"),a("br"),t._v("\ngit checkout branch 的本质，其实是把 HEAD指向指定的branch，然后签出这个 branch 所对应的 commit 的工作目录。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 树状\n$ git log —graph\n\n# 只能往回看\n$ git log --prety=oneline\n\n# 查看所有操作记录\n$ git reflog\n\n# 丢弃工作区的修改\n$ git checkout -- file   \n\n# 将file的内容从暂存区移除回工作区\n$ git reset HEAD file  \t\t \n\n# 修改分支名称\n$ git branch -m branchName alise \n\n# 重命名并将修改添加到暂存区\n$ git mv test.txt test2.txt  \n\n# 删除一个文件并将修改添加到暂存区\n$ git rm test.txt \n\n$ git commit --amend -m '修正上一次的提交信息'\n\n# 仅查看最近3条的提交信息\n$ git log -3 \n\n$ git log —-pretty=oneline\n\n# 没有被 track 的文件(即从来没有被 add 过的文件不会被 stash 起来，因为 Git 会忽略它们。如果想把这些文件也一起 stash，可以加上 `-u` 参数，它是 `--include-untracked` 的简写。\n$ git stash -u\n")])])])])}),[],!1,null,null,null);a.default=i.exports}}]);